package jetbrains.mps.gtext.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.BaseTextGenAspectDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;
import jetbrains.mps.text.LegacyTextGenAdapter;

public class TextGenAspectDescriptor extends BaseTextGenAspectDescriptor {
  private final long[] myId2Index;
  public TextGenAspectDescriptor() {
    myId2Index = new long[10];
    myId2Index[0] = 0x10f1c69244dL;
    myId2Index[1] = 0x10f1c6c16c4L;
    myId2Index[2] = 0x10f1c6efa33L;
    myId2Index[3] = 0x10f1c6f9e76L;
    myId2Index[4] = 0x10f1ca0f1e6L;
    myId2Index[5] = 0x10f2176037dL;
    myId2Index[6] = 0x10fb23a68ddL;
    myId2Index[7] = 0x112886219d4L;
    myId2Index[8] = 0x113d204de52L;
    myId2Index[9] = 0x114b8ab2836L;
  }
  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SConceptId id) {
    final int index = Arrays.binarySearch(myId2Index, id.getIdValue());
    switch (index) {
      case 0:
        return new LegacyTextGenAdapter(GText_TextGen.class);
      case 1:
        return new LegacyTextGenAdapter(GItemList_TextGen.class);
      case 2:
        return new LegacyTextGenAdapter(GNewLine_TextGen.class);
      case 3:
        return new LegacyTextGenAdapter(GIndent_TextGen.class);
      case 4:
        return new LegacyTextGenAdapter(GIndentBlock_TextGen.class);
      case 5:
        return new LegacyTextGenAdapter(GExpressionItem_TextGen.class);
      case 6:
        return new LegacyTextGenAdapter(GLine_TextGen.class);
      case 7:
        return new LegacyTextGenAdapter(GConditionalLine_TextGen.class);
      case 8:
        return new LegacyTextGenAdapter(GDocument_TextGen.class);
      case 9:
        return new LegacyTextGenAdapter(GSeparatorItemList_TextGen.class);
      default:
        return null;
    }
  }
}
