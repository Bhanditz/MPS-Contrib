package jetbrains.mps.gtext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBuilderContextRef = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.BuilderContextRef").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.gtext.structure.GTextConcept").alias("baseBuilderContext", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGCompositeItem = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GCompositeItem").interface_().create();
  /*package*/ final ConceptDescriptor myConceptGConditionalLine = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GConditionalLine").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.gtext.structure.GCompositeItem").properties("isSeparate").children(new String[]{"item"}, new boolean[]{true}).alias(">?conditional line", "").create();
  /*package*/ final ConceptDescriptor myConceptGContentBlock = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GContentBlock").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.gtext.structure.GCompositeItem").children(new String[]{"item"}, new boolean[]{true}).alias("content block", "").create();
  /*package*/ final ConceptDescriptor myConceptGContentPlaceholder = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GContentPlaceholder").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.lang.core.structure.INamedConcept").alias("content placeholder", "").create();
  /*package*/ final ConceptDescriptor myConceptGDocument = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GDocument").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.traceable.structure.UnitConcept").properties("documentName", "extension").children(new String[]{"item"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptGExpressionItem = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GExpressionItem").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").children(new String[]{"expression"}, new boolean[]{false}).alias("expression", "").create();
  /*package*/ final ConceptDescriptor myConceptGIndent = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GIndent").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").alias("indent", "").create();
  /*package*/ final ConceptDescriptor myConceptGIndentBlock = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GIndentBlock").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").children(new String[]{"itemList"}, new boolean[]{false}).alias("indentBlock", "").create();
  /*package*/ final ConceptDescriptor myConceptGItem = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.gtext.structure.GTextConcept", "jetbrains.mps.lang.traceable.structure.TraceableConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGItemList = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GItemList").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.gtext.structure.GCompositeItem").children(new String[]{"item"}, new boolean[]{true}).alias("*itemList", "").create();
  /*package*/ final ConceptDescriptor myConceptGItemStatement = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GItemStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"item"}, new boolean[]{true}).alias("gitem statement", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptGLine = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GLine").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.gtext.structure.GCompositeItem").children(new String[]{"item"}, new boolean[]{true}).alias(">line", "").create();
  /*package*/ final ConceptDescriptor myConceptGNewLine = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GNewLine").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").alias("newLine", "").create();
  /*package*/ final ConceptDescriptor myConceptGSeparatorItemList = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GSeparatorItemList").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.gtext.structure.GCompositeItem").children(new String[]{"separator", "item"}, new boolean[]{false, true}).alias("separator list", "").create();
  /*package*/ final ConceptDescriptor myConceptGStatementItem = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GStatementItem").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").children(new String[]{"statementList"}, new boolean[]{false}).alias("statement", "").create();
  /*package*/ final ConceptDescriptor myConceptGText = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GText").super_("jetbrains.mps.gtext.structure.GItem").parents("jetbrains.mps.gtext.structure.GItem").properties("text").alias("/text", "").create();
  /*package*/ final ConceptDescriptor myConceptGTextConcept = new ConceptDescriptorBuilder("jetbrains.mps.gtext.structure.GTextConcept").interface_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBuilderContextRef, myConceptGCompositeItem, myConceptGConditionalLine, myConceptGContentBlock, myConceptGContentPlaceholder, myConceptGDocument, myConceptGExpressionItem, myConceptGIndent, myConceptGIndentBlock, myConceptGItem, myConceptGItemList, myConceptGItemStatement, myConceptGLine, myConceptGNewLine, myConceptGSeparatorItemList, myConceptGStatementItem, myConceptGText, myConceptGTextConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0v, conceptFqName)) {
      case 0:
        return myConceptBuilderContextRef;
      case 1:
        return myConceptGCompositeItem;
      case 2:
        return myConceptGConditionalLine;
      case 3:
        return myConceptGContentBlock;
      case 4:
        return myConceptGContentPlaceholder;
      case 5:
        return myConceptGDocument;
      case 6:
        return myConceptGExpressionItem;
      case 7:
        return myConceptGIndent;
      case 8:
        return myConceptGIndentBlock;
      case 9:
        return myConceptGItem;
      case 10:
        return myConceptGItemList;
      case 11:
        return myConceptGItemStatement;
      case 12:
        return myConceptGLine;
      case 13:
        return myConceptGNewLine;
      case 14:
        return myConceptGSeparatorItemList;
      case 15:
        return myConceptGStatementItem;
      case 16:
        return myConceptGText;
      case 17:
        return myConceptGTextConcept;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0v = new String[]{"jetbrains.mps.gtext.structure.BuilderContextRef", "jetbrains.mps.gtext.structure.GCompositeItem", "jetbrains.mps.gtext.structure.GConditionalLine", "jetbrains.mps.gtext.structure.GContentBlock", "jetbrains.mps.gtext.structure.GContentPlaceholder", "jetbrains.mps.gtext.structure.GDocument", "jetbrains.mps.gtext.structure.GExpressionItem", "jetbrains.mps.gtext.structure.GIndent", "jetbrains.mps.gtext.structure.GIndentBlock", "jetbrains.mps.gtext.structure.GItem", "jetbrains.mps.gtext.structure.GItemList", "jetbrains.mps.gtext.structure.GItemStatement", "jetbrains.mps.gtext.structure.GLine", "jetbrains.mps.gtext.structure.GNewLine", "jetbrains.mps.gtext.structure.GSeparatorItemList", "jetbrains.mps.gtext.structure.GStatementItem", "jetbrains.mps.gtext.structure.GText", "jetbrains.mps.gtext.structure.GTextConcept"};
}
