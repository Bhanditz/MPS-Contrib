package jetbrains.mps.xmlQuery.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAccessArbitraryAttributeOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AccessArbitraryAttributeOperation").super_("jetbrains.mps.xmlQuery.structure.XMLElementOperation").parents("jetbrains.mps.xmlQuery.structure.XMLElementOperation").children(new String[]{"attributeNameExpression"}, new boolean[]{false}).alias("attribute", "arbitrary attribute").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAccessArbitraryChildrenOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AccessArbitraryChildrenOperation").super_("jetbrains.mps.xmlQuery.structure.XMLElementOperation").parents("jetbrains.mps.xmlQuery.structure.XMLElementOperation").children(new String[]{"childNameExpression"}, new boolean[]{false}).alias("child", "arbitrary child").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAccessAttributeOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AccessAttributeOperation").super_("jetbrains.mps.xmlQuery.structure.XMLElementOperation").parents("jetbrains.mps.xmlQuery.structure.XMLElementOperation").references("attributeDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAccessChildrenOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AccessChildrenOperation").super_("jetbrains.mps.xmlQuery.structure.XMLElementOperation").parents("jetbrains.mps.xmlQuery.structure.XMLElementOperation").references("elementDeclaration").alias("", "access child operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAccessTextOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AccessTextOperation").super_("jetbrains.mps.xmlQuery.structure.XMLElementOperation").parents("jetbrains.mps.xmlQuery.structure.XMLElementOperation").alias("text", "access elements'text").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAttributeBuilder = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.AttributeBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("attributeDeclaration").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptElementBuilder = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.ElementBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").references("elementDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptTextBuilder = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.TextBuilder").super_("jetbrains.mps.baseLanguage.builders.structure.Builder").parents("jetbrains.mps.baseLanguage.builders.structure.Builder").children(new String[]{"value"}, new boolean[]{false}).alias("text :", "XML element text").create();
  /*package*/ final ConceptDescriptor myConceptXMLElementCreator = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.XMLElementCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").children(new String[]{"type"}, new boolean[]{false}).alias("xml<>", "create new XML element").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLElementOperation = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.XMLElementOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptXMLElementType = new ConceptDescriptorBuilder("jetbrains.mps.xmlQuery.structure.XMLElementType").super_("jetbrains.mps.baseLanguage.structure.Type").parents("jetbrains.mps.baseLanguage.structure.Type").references("schema", "complexType").alias("xml<>", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAccessArbitraryAttributeOperation, myConceptAccessArbitraryChildrenOperation, myConceptAccessAttributeOperation, myConceptAccessChildrenOperation, myConceptAccessTextOperation, myConceptAttributeBuilder, myConceptElementBuilder, myConceptTextBuilder, myConceptXMLElementCreator, myConceptXMLElementOperation, myConceptXMLElementType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0o, conceptFqName)) {
      case 0:
        return myConceptAccessArbitraryAttributeOperation;
      case 1:
        return myConceptAccessArbitraryChildrenOperation;
      case 2:
        return myConceptAccessAttributeOperation;
      case 3:
        return myConceptAccessChildrenOperation;
      case 4:
        return myConceptAccessTextOperation;
      case 5:
        return myConceptAttributeBuilder;
      case 6:
        return myConceptElementBuilder;
      case 7:
        return myConceptTextBuilder;
      case 8:
        return myConceptXMLElementCreator;
      case 9:
        return myConceptXMLElementOperation;
      case 10:
        return myConceptXMLElementType;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0o = new String[]{"jetbrains.mps.xmlQuery.structure.AccessArbitraryAttributeOperation", "jetbrains.mps.xmlQuery.structure.AccessArbitraryChildrenOperation", "jetbrains.mps.xmlQuery.structure.AccessAttributeOperation", "jetbrains.mps.xmlQuery.structure.AccessChildrenOperation", "jetbrains.mps.xmlQuery.structure.AccessTextOperation", "jetbrains.mps.xmlQuery.structure.AttributeBuilder", "jetbrains.mps.xmlQuery.structure.ElementBuilder", "jetbrains.mps.xmlQuery.structure.TextBuilder", "jetbrains.mps.xmlQuery.structure.XMLElementCreator", "jetbrains.mps.xmlQuery.structure.XMLElementOperation", "jetbrains.mps.xmlQuery.structure.XMLElementType"};
}
