package jetbrains.mps.xmlInternal.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptComment = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Comment").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"text"}, new boolean[]{true}).alias("!-- comment", "").create();
  /*package*/ final ConceptDescriptor myConceptContentStatement = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.ContentStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"content"}, new boolean[]{false}).alias("contentStatement", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDocument = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Document").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"prolog", "rootElement"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptDocumentStatement = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.DocumentStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"document"}, new boolean[]{false}).alias("document statement", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDocumentTypeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.DocumentTypeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("docTypeName").children(new String[]{"externalId"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptExternalId = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.ExternalId").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptLiteral = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Literal").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("value").create();
  /*package*/ final ConceptDescriptor myConceptNamespaceAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.NamespaceAttribute").super_("jetbrains.mps.xml.structure.BaseAttribute").parents("jetbrains.mps.xml.structure.BaseAttribute").properties("prefix", "uri").create();
  /*package*/ final ConceptDescriptor myConceptProlog = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.Prolog").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"documentTypeDeclaration"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptPublicExternalId = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.PublicExternalId").super_("jetbrains.mps.xmlInternal.structure.ExternalId").parents("jetbrains.mps.xmlInternal.structure.ExternalId").children(new String[]{"pubidLiteral", "systemLiteral"}, new boolean[]{false, false}).alias("PUBLIC", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.SimpleAttribute").super_("jetbrains.mps.xml.structure.BaseAttribute").parents("jetbrains.mps.xml.structure.BaseAttribute").properties("attributeName").children(new String[]{"value"}, new boolean[]{false}).alias("simple attribute", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleElement = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.SimpleElement").super_("jetbrains.mps.xml.structure.BaseElement").parents("jetbrains.mps.xml.structure.BaseElement").children(new String[]{"elementName"}, new boolean[]{false}).alias("simple element", "").create();
  /*package*/ final ConceptDescriptor myConceptStatementElement = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.StatementElement").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"statementList"}, new boolean[]{false}).alias("statementElement", "").create();
  /*package*/ final ConceptDescriptor myConceptXmlFile = new ConceptDescriptorBuilder("jetbrains.mps.xmlInternal.structure.XmlFile").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.xml.structure.XmlRoot").properties("fileName", "extension").references("schema").children(new String[]{"document"}, new boolean[]{false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptComment, myConceptContentStatement, myConceptDocument, myConceptDocumentStatement, myConceptDocumentTypeDeclaration, myConceptExternalId, myConceptLiteral, myConceptNamespaceAttribute, myConceptProlog, myConceptPublicExternalId, myConceptSimpleAttribute, myConceptSimpleElement, myConceptStatementElement, myConceptXmlFile);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0r, conceptFqName)) {
      case 0:
        return myConceptComment;
      case 1:
        return myConceptContentStatement;
      case 2:
        return myConceptDocument;
      case 3:
        return myConceptDocumentStatement;
      case 4:
        return myConceptDocumentTypeDeclaration;
      case 5:
        return myConceptExternalId;
      case 6:
        return myConceptLiteral;
      case 7:
        return myConceptNamespaceAttribute;
      case 8:
        return myConceptProlog;
      case 9:
        return myConceptPublicExternalId;
      case 10:
        return myConceptSimpleAttribute;
      case 11:
        return myConceptSimpleElement;
      case 12:
        return myConceptStatementElement;
      case 13:
        return myConceptXmlFile;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0r = new String[]{"jetbrains.mps.xmlInternal.structure.Comment", "jetbrains.mps.xmlInternal.structure.ContentStatement", "jetbrains.mps.xmlInternal.structure.Document", "jetbrains.mps.xmlInternal.structure.DocumentStatement", "jetbrains.mps.xmlInternal.structure.DocumentTypeDeclaration", "jetbrains.mps.xmlInternal.structure.ExternalId", "jetbrains.mps.xmlInternal.structure.Literal", "jetbrains.mps.xmlInternal.structure.NamespaceAttribute", "jetbrains.mps.xmlInternal.structure.Prolog", "jetbrains.mps.xmlInternal.structure.PublicExternalId", "jetbrains.mps.xmlInternal.structure.SimpleAttribute", "jetbrains.mps.xmlInternal.structure.SimpleElement", "jetbrains.mps.xmlInternal.structure.StatementElement", "jetbrains.mps.xmlInternal.structure.XmlFile"};
}
