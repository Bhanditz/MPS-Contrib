package jetbrains.mps.xml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.Attribute").super_("jetbrains.mps.xml.structure.BaseAttribute").parents("jetbrains.mps.xml.structure.BaseAttribute", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").references("attributeDeclaration").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBaseAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.BaseAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBaseElement = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.BaseElement").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"contentList", "attribute"}, new boolean[]{false, true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBaseText = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.BaseText").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptCDATA = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.CDATA").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").children(new String[]{"contentList"}, new boolean[]{false}).alias("CDATA", "").create();
  /*package*/ final ConceptDescriptor myConceptComplexText = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.ComplexText").super_("jetbrains.mps.xml.structure.BaseText").parents("jetbrains.mps.xml.structure.BaseText").children(new String[]{"text"}, new boolean[]{true}).alias("*complexText", "").create();
  /*package*/ final ConceptDescriptor myConceptContent = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.Content").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptContentList = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.ContentList").super_("jetbrains.mps.xml.structure.Content").parents("jetbrains.mps.xml.structure.Content").properties("isHorizontal").children(new String[]{"content"}, new boolean[]{true}).alias("(contentList)", "").create();
  /*package*/ final ConceptDescriptor myConceptElement = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.Element").super_("jetbrains.mps.xml.structure.BaseElement").parents("jetbrains.mps.xml.structure.BaseElement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("isEmpty").references("elementDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptEntityReference = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.EntityReference").super_("jetbrains.mps.xml.structure.BaseText").parents("jetbrains.mps.xml.structure.BaseText").references("entityDeclaration").alias("&entity;", "").create();
  /*package*/ final ConceptDescriptor myConceptText = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.Text").super_("jetbrains.mps.xml.structure.BaseText").parents("jetbrains.mps.xml.structure.BaseText", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").alias("/text", "plain text").create();
  /*package*/ final ConceptDescriptor myConceptXmlRoot = new ConceptDescriptorBuilder("jetbrains.mps.xml.structure.XmlRoot").interface_().create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttribute, myConceptBaseAttribute, myConceptBaseElement, myConceptBaseText, myConceptCDATA, myConceptComplexText, myConceptContent, myConceptContentList, myConceptElement, myConceptEntityReference, myConceptText, myConceptXmlRoot);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0p, conceptFqName)) {
      case 0:
        return myConceptAttribute;
      case 1:
        return myConceptBaseAttribute;
      case 2:
        return myConceptBaseElement;
      case 3:
        return myConceptBaseText;
      case 4:
        return myConceptCDATA;
      case 5:
        return myConceptComplexText;
      case 6:
        return myConceptContent;
      case 7:
        return myConceptContentList;
      case 8:
        return myConceptElement;
      case 9:
        return myConceptEntityReference;
      case 10:
        return myConceptText;
      case 11:
        return myConceptXmlRoot;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0p = new String[]{"jetbrains.mps.xml.structure.Attribute", "jetbrains.mps.xml.structure.BaseAttribute", "jetbrains.mps.xml.structure.BaseElement", "jetbrains.mps.xml.structure.BaseText", "jetbrains.mps.xml.structure.CDATA", "jetbrains.mps.xml.structure.ComplexText", "jetbrains.mps.xml.structure.Content", "jetbrains.mps.xml.structure.ContentList", "jetbrains.mps.xml.structure.Element", "jetbrains.mps.xml.structure.EntityReference", "jetbrains.mps.xml.structure.Text", "jetbrains.mps.xml.structure.XmlRoot"};
}
