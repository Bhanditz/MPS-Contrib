package jetbrains.mps.xmlSchema.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAttributeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.AttributeDeclaration").super_("jetbrains.mps.xmlSchema.structure.AttributeExpression").parents("jetbrains.mps.xmlSchema.structure.AttributeExpression", "jetbrains.mps.lang.core.structure.INamedConcept").properties("attributeName").children(new String[]{"useAttribute", "type"}, new boolean[]{false, false}).alias("attribute", "").create();
  /*package*/ final ConceptDescriptor myConceptAttributeExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.AttributeExpression").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptAttributeGroup = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.AttributeGroup").super_("jetbrains.mps.xmlSchema.structure.Declaration").parents("jetbrains.mps.xmlSchema.structure.Declaration").properties("attributeGroupName").children(new String[]{"attributeExpression"}, new boolean[]{true}).alias("attributeGroup", "").create();
  /*package*/ final ConceptDescriptor myConceptAttributeGroupReference = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.AttributeGroupReference").super_("jetbrains.mps.xmlSchema.structure.AttributeExpression").parents("jetbrains.mps.xmlSchema.structure.AttributeExpression").references("attributeGroup").create();
  /*package*/ final ConceptDescriptor myConceptBooleanSchemaType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.BooleanSchemaType").super_("jetbrains.mps.xmlSchema.structure.SchemaType").parents("jetbrains.mps.xmlSchema.structure.SchemaType").properties("defaultValue").alias("boolean", "").create();
  /*package*/ final ConceptDescriptor myConceptBoundExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.BoundExpression").super_("jetbrains.mps.xmlSchema.structure.MaxOccursExpression").parents("jetbrains.mps.xmlSchema.structure.MaxOccursExpression").properties("maxOccurs").alias("bound", "").create();
  /*package*/ final ConceptDescriptor myConceptChoice = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.Choice").super_("jetbrains.mps.xmlSchema.structure.GroupExpression").parents("jetbrains.mps.xmlSchema.structure.GroupExpression").children(new String[]{"typeExpressionList", "occursAttribute"}, new boolean[]{false, false}).alias("choice", "").create();
  /*package*/ final ConceptDescriptor myConceptComplexContent = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ComplexContent").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").children(new String[]{"contentItem"}, new boolean[]{false}).alias("complexContent", "").create();
  /*package*/ final ConceptDescriptor myConceptComplexType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ComplexType").super_("jetbrains.mps.xmlSchema.structure.Declaration").parents("jetbrains.mps.xmlSchema.structure.Declaration").properties("typeName").children(new String[]{"typeExpressionList", "mixedAttribute"}, new boolean[]{false, false}).alias("complexType", "").create();
  /*package*/ final ConceptDescriptor myConceptComplexTypeReference = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ComplexTypeReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("complexType").create();
  /*package*/ final ConceptDescriptor myConceptContentItem = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ContentItem").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"complexTypeReference"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.Declaration").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptDeclarationBlock = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.DeclarationBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"textLine", "declaration"}, new boolean[]{true, true}).create();
  /*package*/ final ConceptDescriptor myConceptElementDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ElementDeclaration").super_("jetbrains.mps.xmlSchema.structure.Declaration").parents("jetbrains.mps.xmlSchema.structure.Declaration").properties("elementName").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptElementReference = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ElementReference").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").references("elementDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptElementWithContent = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ElementWithContent").super_("jetbrains.mps.xmlSchema.structure.ElementDeclaration").parents("jetbrains.mps.xmlSchema.structure.ElementDeclaration").children(new String[]{"complexType"}, new boolean[]{false}).alias("elementWithContent", "").create();
  /*package*/ final ConceptDescriptor myConceptElementWithType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.ElementWithType").super_("jetbrains.mps.xmlSchema.structure.ElementDeclaration").parents("jetbrains.mps.xmlSchema.structure.ElementDeclaration").children(new String[]{"complexTypeReference", "occursAttribute"}, new boolean[]{false, false}).alias("elementWithType", "").create();
  /*package*/ final ConceptDescriptor myConceptEntityBlock = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.EntityBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.xmlSchema.structure.SchemaCommentable").children(new String[]{"entityLine"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptEntityDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.EntityDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("entityName").create();
  /*package*/ final ConceptDescriptor myConceptEntityLine = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.EntityLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.xmlSchema.structure.SchemaCommentable").children(new String[]{"entityDeclaration"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptEntitySet = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.EntitySet").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("entitySetName", "url").children(new String[]{"entityBlock"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptExtension = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.Extension").super_("jetbrains.mps.xmlSchema.structure.ContentItem").parents("jetbrains.mps.xmlSchema.structure.ContentItem").children(new String[]{"typeExpressionList"}, new boolean[]{false}).alias("extension", "").create();
  /*package*/ final ConceptDescriptor myConceptGroupDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.GroupDeclaration").super_("jetbrains.mps.xmlSchema.structure.Declaration").parents("jetbrains.mps.xmlSchema.structure.Declaration").properties("groupName").children(new String[]{"groupExpression"}, new boolean[]{false}).alias("group", "").create();
  /*package*/ final ConceptDescriptor myConceptGroupExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.GroupExpression").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGroupReference = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.GroupReference").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").references("groupDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptIntegerSchemaType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.IntegerSchemaType").super_("jetbrains.mps.xmlSchema.structure.SchemaType").parents("jetbrains.mps.xmlSchema.structure.SchemaType").properties("defaultValue").alias("integer", "").create();
  /*package*/ final ConceptDescriptor myConceptMaxOccursExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.MaxOccursExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptMixedAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.MixedAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").alias("mixed", "").create();
  /*package*/ final ConceptDescriptor myConceptNamespaceDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.NamespaceDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("prefix", "uri").create();
  /*package*/ final ConceptDescriptor myConceptOccursAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.OccursAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("minOccurs").children(new String[]{"maxOccurs"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSchema = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.Schema").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("schemaName", "schemaUrl", "alwaysUseRoot").children(new String[]{"declarationBlock", "rootElementReference", "defaultNamespaceDeclaration"}, new boolean[]{true, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptSchemaComment = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.SchemaComment").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"text"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptSchemaCommentable = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.SchemaCommentable").interface_().children(new String[]{"sComment"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptSchemaType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.SchemaType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptSequence = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.Sequence").super_("jetbrains.mps.xmlSchema.structure.GroupExpression").parents("jetbrains.mps.xmlSchema.structure.GroupExpression").children(new String[]{"typeExpressionList"}, new boolean[]{false}).alias("sequence", "").create();
  /*package*/ final ConceptDescriptor myConceptSimpleContent = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.SimpleContent").super_("jetbrains.mps.xmlSchema.structure.TypeExpression").parents("jetbrains.mps.xmlSchema.structure.TypeExpression").alias("simpleContent", "").create();
  /*package*/ final ConceptDescriptor myConceptStringSchemaType = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.StringSchemaType").super_("jetbrains.mps.xmlSchema.structure.SchemaType").parents("jetbrains.mps.xmlSchema.structure.SchemaType").properties("defaultValue").alias("string", "").create();
  /*package*/ final ConceptDescriptor myConceptTextLine = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.TextLine").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("line").create();
  /*package*/ final ConceptDescriptor myConceptTypeExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.TypeExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptTypeExpressionList = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.TypeExpressionList").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("isVertical").children(new String[]{"typeExpression"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptUnboundExpression = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.UnboundExpression").super_("jetbrains.mps.xmlSchema.structure.MaxOccursExpression").parents("jetbrains.mps.xmlSchema.structure.MaxOccursExpression").alias("unbound", "").create();
  /*package*/ final ConceptDescriptor myConceptUseAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlSchema.structure.UseAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("use").alias("use", "").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttributeDeclaration, myConceptAttributeExpression, myConceptAttributeGroup, myConceptAttributeGroupReference, myConceptBooleanSchemaType, myConceptBoundExpression, myConceptChoice, myConceptComplexContent, myConceptComplexType, myConceptComplexTypeReference, myConceptContentItem, myConceptDeclaration, myConceptDeclarationBlock, myConceptElementDeclaration, myConceptElementReference, myConceptElementWithContent, myConceptElementWithType, myConceptEntityBlock, myConceptEntityDeclaration, myConceptEntityLine, myConceptEntitySet, myConceptExtension, myConceptGroupDeclaration, myConceptGroupExpression, myConceptGroupReference, myConceptIntegerSchemaType, myConceptMaxOccursExpression, myConceptMixedAttribute, myConceptNamespaceDeclaration, myConceptOccursAttribute, myConceptSchema, myConceptSchemaComment, myConceptSchemaCommentable, myConceptSchemaType, myConceptSequence, myConceptSimpleContent, myConceptStringSchemaType, myConceptTextLine, myConceptTypeExpression, myConceptTypeExpressionList, myConceptUnboundExpression, myConceptUseAttribute);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0tb, conceptFqName)) {
      case 0:
        return myConceptAttributeDeclaration;
      case 1:
        return myConceptAttributeExpression;
      case 2:
        return myConceptAttributeGroup;
      case 3:
        return myConceptAttributeGroupReference;
      case 4:
        return myConceptBooleanSchemaType;
      case 5:
        return myConceptBoundExpression;
      case 6:
        return myConceptChoice;
      case 7:
        return myConceptComplexContent;
      case 8:
        return myConceptComplexType;
      case 9:
        return myConceptComplexTypeReference;
      case 10:
        return myConceptContentItem;
      case 11:
        return myConceptDeclaration;
      case 12:
        return myConceptDeclarationBlock;
      case 13:
        return myConceptElementDeclaration;
      case 14:
        return myConceptElementReference;
      case 15:
        return myConceptElementWithContent;
      case 16:
        return myConceptElementWithType;
      case 17:
        return myConceptEntityBlock;
      case 18:
        return myConceptEntityDeclaration;
      case 19:
        return myConceptEntityLine;
      case 20:
        return myConceptEntitySet;
      case 21:
        return myConceptExtension;
      case 22:
        return myConceptGroupDeclaration;
      case 23:
        return myConceptGroupExpression;
      case 24:
        return myConceptGroupReference;
      case 25:
        return myConceptIntegerSchemaType;
      case 26:
        return myConceptMaxOccursExpression;
      case 27:
        return myConceptMixedAttribute;
      case 28:
        return myConceptNamespaceDeclaration;
      case 29:
        return myConceptOccursAttribute;
      case 30:
        return myConceptSchema;
      case 31:
        return myConceptSchemaComment;
      case 32:
        return myConceptSchemaCommentable;
      case 33:
        return myConceptSchemaType;
      case 34:
        return myConceptSequence;
      case 35:
        return myConceptSimpleContent;
      case 36:
        return myConceptStringSchemaType;
      case 37:
        return myConceptTextLine;
      case 38:
        return myConceptTypeExpression;
      case 39:
        return myConceptTypeExpressionList;
      case 40:
        return myConceptUnboundExpression;
      case 41:
        return myConceptUseAttribute;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0tb = new String[]{"jetbrains.mps.xmlSchema.structure.AttributeDeclaration", "jetbrains.mps.xmlSchema.structure.AttributeExpression", "jetbrains.mps.xmlSchema.structure.AttributeGroup", "jetbrains.mps.xmlSchema.structure.AttributeGroupReference", "jetbrains.mps.xmlSchema.structure.BooleanSchemaType", "jetbrains.mps.xmlSchema.structure.BoundExpression", "jetbrains.mps.xmlSchema.structure.Choice", "jetbrains.mps.xmlSchema.structure.ComplexContent", "jetbrains.mps.xmlSchema.structure.ComplexType", "jetbrains.mps.xmlSchema.structure.ComplexTypeReference", "jetbrains.mps.xmlSchema.structure.ContentItem", "jetbrains.mps.xmlSchema.structure.Declaration", "jetbrains.mps.xmlSchema.structure.DeclarationBlock", "jetbrains.mps.xmlSchema.structure.ElementDeclaration", "jetbrains.mps.xmlSchema.structure.ElementReference", "jetbrains.mps.xmlSchema.structure.ElementWithContent", "jetbrains.mps.xmlSchema.structure.ElementWithType", "jetbrains.mps.xmlSchema.structure.EntityBlock", "jetbrains.mps.xmlSchema.structure.EntityDeclaration", "jetbrains.mps.xmlSchema.structure.EntityLine", "jetbrains.mps.xmlSchema.structure.EntitySet", "jetbrains.mps.xmlSchema.structure.Extension", "jetbrains.mps.xmlSchema.structure.GroupDeclaration", "jetbrains.mps.xmlSchema.structure.GroupExpression", "jetbrains.mps.xmlSchema.structure.GroupReference", "jetbrains.mps.xmlSchema.structure.IntegerSchemaType", "jetbrains.mps.xmlSchema.structure.MaxOccursExpression", "jetbrains.mps.xmlSchema.structure.MixedAttribute", "jetbrains.mps.xmlSchema.structure.NamespaceDeclaration", "jetbrains.mps.xmlSchema.structure.OccursAttribute", "jetbrains.mps.xmlSchema.structure.Schema", "jetbrains.mps.xmlSchema.structure.SchemaComment", "jetbrains.mps.xmlSchema.structure.SchemaCommentable", "jetbrains.mps.xmlSchema.structure.SchemaType", "jetbrains.mps.xmlSchema.structure.Sequence", "jetbrains.mps.xmlSchema.structure.SimpleContent", "jetbrains.mps.xmlSchema.structure.StringSchemaType", "jetbrains.mps.xmlSchema.structure.TextLine", "jetbrains.mps.xmlSchema.structure.TypeExpression", "jetbrains.mps.xmlSchema.structure.TypeExpressionList", "jetbrains.mps.xmlSchema.structure.UnboundExpression", "jetbrains.mps.xmlSchema.structure.UseAttribute"};
}
