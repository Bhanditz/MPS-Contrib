package jetbrains.mps.xmlUnitTest.textGen;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import org.jdom.Element;
import org.jdom.Document;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.apache.log4j.Logger;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public abstract class ElementCreator {
  public static void byElement(SNode node, final SNodeTextGen textGen) {
    SNode element = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914055l, 5266766379151914057l, "rootElement"));
    Element result = ElementCreator.createElement(element, textGen);
    Document document = new Document();
    document.setRootElement(result);
    try {
      Format prettyFormat = Format.getPrettyFormat();
      prettyFormat.setTextMode(Format.TextMode.PRESERVE);
      XMLOutputter xmlOutputter = new XMLOutputter(prettyFormat);
      String output = xmlOutputter.outputString(document);
      textGen.append(output);
    } catch (Exception e) {
      Logger.getLogger(Document.class).error(e);
    }
  }
  protected static Element createElement(SNode element, final SNodeTextGen textGen) {
    Element result = new Element(SPropertyOperations.getString(element, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")));
    for (SNode attribute : SLinkOperations.getChildren(element, MetaAdapterFactory.getContainmentLink(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914058l, 5266766379151914059l, "attribute"))) {
      if (SPropertyOperations.getString(attribute, MetaAdapterFactory.getProperty(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914050l, 5266766379151914052l, "value")) != null) {
        result.setAttribute(SPropertyOperations.getString(attribute, MetaAdapterFactory.getProperty(new UUID(-3554657779850784990l, -7236703803128771572l), 1169194658468l, 1169194664001l, "name")), SPropertyOperations.getString(attribute, MetaAdapterFactory.getProperty(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914050l, 5266766379151914052l, "value")));
      }
    }
    boolean first = true;
    for (SNode part : SLinkOperations.getChildren(element, MetaAdapterFactory.getContainmentLink(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914058l, 5266766379151914060l, "content"))) {
      if (SNodeOperations.isInstanceOf(part, MetaAdapterFactory.getConcept(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914066l, "jetbrains.mps.xmlUnitTest.structure.Text"))) {
        if (!(first)) {
          result.addContent("\n");
        }
        result.addContent(SPropertyOperations.getString(SNodeOperations.cast(part, MetaAdapterFactory.getConcept(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914066l, "jetbrains.mps.xmlUnitTest.structure.Text")), MetaAdapterFactory.getProperty(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914066l, 5266766379151914067l, "text")));
      }
      if (SNodeOperations.isInstanceOf(part, MetaAdapterFactory.getConcept(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914058l, "jetbrains.mps.xmlUnitTest.structure.Element"))) {
        result.addContent(ElementCreator.createElement(SNodeOperations.cast(part, MetaAdapterFactory.getConcept(new UUID(-550886282855561870l, -4828828743312609243l), 5266766379151914058l, "jetbrains.mps.xmlUnitTest.structure.Element")), textGen));
      }
      first = false;
    }
    return result;
  }
}
