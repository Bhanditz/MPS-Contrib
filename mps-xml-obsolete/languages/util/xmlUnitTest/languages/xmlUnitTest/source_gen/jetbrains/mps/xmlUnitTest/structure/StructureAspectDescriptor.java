package jetbrains.mps.xmlUnitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAssertXMLEquals = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.AssertXMLEquals").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.unitTest.structure.MessageHolder").children(new String[]{"expected", "actual"}, new boolean[]{false, false}).alias("assert XML equals", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAttribute = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.Attribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("", "attribute").create();
  /*package*/ final ConceptDescriptor myConceptDocument = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.Document").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"rootElement"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptElement = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.Element").super_("jetbrains.mps.xmlUnitTest.structure.ElementPart").parents("jetbrains.mps.xmlUnitTest.structure.ElementPart").children(new String[]{"attribute", "content"}, new boolean[]{true, true}).alias("<", "element").create();
  /*package*/ final ConceptDescriptor myConceptElementPart = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.ElementPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptText = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.Text").super_("jetbrains.mps.xmlUnitTest.structure.ElementPart").parents("jetbrains.mps.xmlUnitTest.structure.ElementPart", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("text").alias("", "text").create();
  /*package*/ final ConceptDescriptor myConceptXMLLiteral = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.XMLLiteral").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"element"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptXMLStringLiteral = new ConceptDescriptorBuilder("jetbrains.mps.xmlUnitTest.structure.XMLStringLiteral").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"xml"}, new boolean[]{false}).alias("`", "XML literal as string").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAssertXMLEquals, myConceptAttribute, myConceptDocument, myConceptElement, myConceptElementPart, myConceptText, myConceptXMLLiteral, myConceptXMLStringLiteral);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0l, conceptFqName)) {
      case 0:
        return myConceptAssertXMLEquals;
      case 1:
        return myConceptAttribute;
      case 2:
        return myConceptDocument;
      case 3:
        return myConceptElement;
      case 4:
        return myConceptElementPart;
      case 5:
        return myConceptText;
      case 6:
        return myConceptXMLLiteral;
      case 7:
        return myConceptXMLStringLiteral;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0l = new String[]{"jetbrains.mps.xmlUnitTest.structure.AssertXMLEquals", "jetbrains.mps.xmlUnitTest.structure.Attribute", "jetbrains.mps.xmlUnitTest.structure.Document", "jetbrains.mps.xmlUnitTest.structure.Element", "jetbrains.mps.xmlUnitTest.structure.ElementPart", "jetbrains.mps.xmlUnitTest.structure.Text", "jetbrains.mps.xmlUnitTest.structure.XMLLiteral", "jetbrains.mps.xmlUnitTest.structure.XMLStringLiteral"};
}
