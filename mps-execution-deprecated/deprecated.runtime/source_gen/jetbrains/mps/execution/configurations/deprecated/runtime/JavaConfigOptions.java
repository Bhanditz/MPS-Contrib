package jetbrains.mps.execution.configurations.deprecated.runtime;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JLabel;
import jetbrains.mps.execution.lib.ui.RawLineEditorComponent;
import jetbrains.mps.execution.lib.ui.FieldWithPathChooseDialog;
import javax.swing.JCheckBox;
import java.util.List;
import org.jdesktop.beansbinding.AutoBinding;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.uiLanguage.runtime.events.Events;
import java.awt.GridBagLayout;
import jetbrains.mps.ide.common.LayoutUtil;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.util.annotation.ToRemove;
import org.jetbrains.annotations.Nullable;

public class JavaConfigOptions extends JPanel {
  public JavaConfigOptions myThis;
  private JLabel myComponent_jy82jx_b0;
  private RawLineEditorComponent myVmParam_jy82jx_c0;
  private JLabel myComponent_jy82jx_d0;
  private RawLineEditorComponent myProgramParam_jy82jx_e0;
  private JLabel myComponent_jy82jx_f0;
  private FieldWithPathChooseDialog myWorkingDir_jy82jx_g0;
  private JCheckBox myAltJre_jy82jx_h0;
  private FieldWithPathChooseDialog myJreHome_jy82jx_i0;
  public List<AutoBinding> myBindings = ListSequence.fromList(new ArrayList<AutoBinding>());
  private Events myEvents = new Events(null) {
    {
    }
    public void initialize() {
    }
  };
  public JavaConfigOptions() {
    this.myThis = this;
    JavaConfigOptions component = this;
    component.setLayout(new GridBagLayout());
    component.add(this.createComponent_jy82jx_b0(), LayoutUtil.createLabelConstraints(0));
    component.add(this.createComponent_jy82jx_c0(), LayoutUtil.createPanelConstraints(1));
    component.add(this.createComponent_jy82jx_d0(), LayoutUtil.createLabelConstraints(2));
    component.add(this.createComponent_jy82jx_e0(), LayoutUtil.createPanelConstraints(3));
    component.add(this.createComponent_jy82jx_f0(), LayoutUtil.createLabelConstraints(4));
    component.add(this.createComponent_jy82jx_g0(), LayoutUtil.createPanelConstraints(5));
    component.add(this.createComponent_jy82jx_h0(), LayoutUtil.createLabelConstraints(9));
    component.add(this.createComponent_jy82jx_i0(), LayoutUtil.createPanelConstraints(10));
    this.myEvents.initialize();
  }
  public Events getEvents() {
    return this.myEvents;
  }
  public void addNotify() {
    super.addNotify();
    this.bind();
  }
  public void removeNotify() {
    this.unbind();
    super.removeNotify();
  }
  private void bind() {
  }
  private void unbind() {
    for (AutoBinding binding : this.myBindings) {
      if (binding.isBound()) {
        binding.unbind();
      }
    }
  }
  private JLabel createComponent_jy82jx_b0() {
    JLabel component = new JLabel();
    this.myComponent_jy82jx_b0 = component;
    component.setText("VM Parameters:");
    return component;
  }
  private RawLineEditorComponent createComponent_jy82jx_c0() {
    RawLineEditorComponent component = new RawLineEditorComponent();
    this.myVmParam_jy82jx_c0 = component;
    component.setDialogCaption("VM Parameters");
    return component;
  }
  private JLabel createComponent_jy82jx_d0() {
    JLabel component = new JLabel();
    this.myComponent_jy82jx_d0 = component;
    component.setText("Program Parameters:");
    return component;
  }
  private RawLineEditorComponent createComponent_jy82jx_e0() {
    RawLineEditorComponent component = new RawLineEditorComponent();
    this.myProgramParam_jy82jx_e0 = component;
    component.setDialogCaption("Program Parameters");
    return component;
  }
  private JLabel createComponent_jy82jx_f0() {
    JLabel component = new JLabel();
    this.myComponent_jy82jx_f0 = component;
    component.setText("Working Directory:");
    return component;
  }
  private FieldWithPathChooseDialog createComponent_jy82jx_g0() {
    FieldWithPathChooseDialog component = new FieldWithPathChooseDialog();
    this.myWorkingDir_jy82jx_g0 = component;
    component.setTitle("Select Working Directory");
    return component;
  }
  private JCheckBox createComponent_jy82jx_h0() {
    JCheckBox component = new JCheckBox();
    this.myAltJre_jy82jx_h0 = component;
    component.setText("Use alternative JRE");
    component.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent event) {
        myThis.onCheckUseAlternativeJRE();
      }
    });
    return component;
  }
  private FieldWithPathChooseDialog createComponent_jy82jx_i0() {
    FieldWithPathChooseDialog component = new FieldWithPathChooseDialog();
    this.myJreHome_jy82jx_i0 = component;
    component.setTitle("Select Alternative JRE home");
    return component;
  }
  @Deprecated
  @ToRemove(version = 2.0)
  public void reset(@Nullable ConfigRunParameters config) {
    if (config != null) {
      myThis.myProgramParam_jy82jx_e0.setText(config.getProgramParameters());
      myThis.myVmParam_jy82jx_c0.setText(config.getVMParameters());
      myThis.myWorkingDir_jy82jx_g0.setText(config.getWorkingDirectory());
      myThis.myJreHome_jy82jx_i0.setText(config.getAlternativeJRE());
      myThis.myAltJre_jy82jx_h0.setSelected(config.getUseAlternativeJRE());
    }
  }
  @Deprecated
  @ToRemove(version = 2.0)
  public void apply(@Nullable ConfigRunParameters config) {
    if (config != null) {
      config.setVMParameters(myThis.myVmParam_jy82jx_c0.getText());
      config.setProgramParameters(myThis.myProgramParam_jy82jx_e0.getText());
      config.setWorkingDirectory(myThis.myWorkingDir_jy82jx_g0.getText());
      config.setAlternativeJRE(myThis.myJreHome_jy82jx_i0.getText());
      config.setUseAlternativeJRE(myThis.myAltJre_jy82jx_h0.isSelected());
    }
  }
  public void dispose() {
    myThis.myJreHome_jy82jx_i0.dispose();
    myThis.myWorkingDir_jy82jx_g0.dispose();
    myThis.myProgramParam_jy82jx_e0.dispose();
    myThis.myVmParam_jy82jx_c0.dispose();
  }
  public void onCheckUseAlternativeJRE() {
    myThis.myJreHome_jy82jx_i0.setEditable(myThis.myAltJre_jy82jx_h0.isSelected());
  }
}
