package jetbrains.mps.baseLanguage.dates.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.UUID;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;

public class FormatDateTimeExpression_delete {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new FormatDateTimeExpression_delete.FormatDateTimeExpression_delete_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new FormatDateTimeExpression_delete.FormatDateTimeExpression_delete_BACKSPACE(node));
  }
  public static class FormatDateTimeExpression_delete_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public FormatDateTimeExpression_delete_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Remove formatting";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode result = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-3689458971415590814l, -6289781637635314138l), 5034322243092296606l, 5034322243092298623l, "datetime"));
      SNodeOperations.replaceWithAnother(node, result);
      SelectionUtil.selectNode(editorContext, result);
    }
  }
  public static class FormatDateTimeExpression_delete_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public FormatDateTimeExpression_delete_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "Remove formatting";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode result = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(new UUID(-3689458971415590814l, -6289781637635314138l), 5034322243092296606l, 5034322243092298623l, "datetime"));
      SNodeOperations.replaceWithAnother(node, result);
      SelectionUtil.selectNode(editorContext, result);
    }
  }
}
