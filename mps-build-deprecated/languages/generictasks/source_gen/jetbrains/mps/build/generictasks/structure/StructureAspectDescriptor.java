package jetbrains.mps.build.generictasks.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAttribute = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.Attribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("attributeDeclaration").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptAttributeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.AttributeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").properties("deprecated", "required").children(new String[]{"default", "attributeType", "enum"}, new boolean[]{false, false, false}).alias("attribute declaration", "").create();
  /*package*/ final ConceptDescriptor myConceptBuiltInTaskDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.build.generictasks.structure.ITaskDeclaration", "jetbrains.mps.lang.core.structure.BaseConcept").properties("fake").children(new String[]{"nested", "fakeDeclaration"}, new boolean[]{true, true}).alias("generic declaration", "").create();
  /*package*/ final ConceptDescriptor myConceptITaskDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.ITaskDeclaration").interface_().parents("jetbrains.mps.buildlanguage.structure.IDeclaration", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").properties("classname", "canHaveInternalText", "abstract", "depracated").children(new String[]{"attributesDecl", "parentRef", "interfaces"}, new boolean[]{true, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptNestedDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.NestedDeclaration").super_("jetbrains.mps.build.generictasks.structure.TaskReference").parents("jetbrains.mps.build.generictasks.structure.TaskReference").children(new String[]{"role"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptPathReference = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.PathReference").super_("jetbrains.mps.buildlanguage.structure.CallReference").parents("jetbrains.mps.buildlanguage.structure.CallReference").alias("", "path reference").create();
  /*package*/ final ConceptDescriptor myConceptTaskCall = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.TaskCall").super_("jetbrains.mps.buildlanguage.structure.AbstractCall").parents("jetbrains.mps.buildlanguage.structure.AbstractCall", "jetbrains.mps.lang.core.structure.INamedConcept").properties("id").references("declaration").children(new String[]{"atributes"}, new boolean[]{true}).alias("<{declaration}>", "").create();
  /*package*/ final ConceptDescriptor myConceptTaskInterfaceDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.TaskInterfaceDeclaration").super_("jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration").parents("jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration").children(new String[]{"parents"}, new boolean[]{true}).alias("generic interface declaration", "").create();
  /*package*/ final ConceptDescriptor myConceptTaskReference = new ConceptDescriptorBuilder("jetbrains.mps.build.generictasks.structure.TaskReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("declaration").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAttribute, myConceptAttributeDeclaration, myConceptBuiltInTaskDeclaration, myConceptITaskDeclaration, myConceptNestedDeclaration, myConceptPathReference, myConceptTaskCall, myConceptTaskInterfaceDeclaration, myConceptTaskReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0m, conceptFqName)) {
      case 0:
        return myConceptAttribute;
      case 1:
        return myConceptAttributeDeclaration;
      case 2:
        return myConceptBuiltInTaskDeclaration;
      case 3:
        return myConceptITaskDeclaration;
      case 4:
        return myConceptNestedDeclaration;
      case 5:
        return myConceptPathReference;
      case 6:
        return myConceptTaskCall;
      case 7:
        return myConceptTaskInterfaceDeclaration;
      case 8:
        return myConceptTaskReference;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0m = new String[]{"jetbrains.mps.build.generictasks.structure.Attribute", "jetbrains.mps.build.generictasks.structure.AttributeDeclaration", "jetbrains.mps.build.generictasks.structure.BuiltInTaskDeclaration", "jetbrains.mps.build.generictasks.structure.ITaskDeclaration", "jetbrains.mps.build.generictasks.structure.NestedDeclaration", "jetbrains.mps.build.generictasks.structure.PathReference", "jetbrains.mps.build.generictasks.structure.TaskCall", "jetbrains.mps.build.generictasks.structure.TaskInterfaceDeclaration", "jetbrains.mps.build.generictasks.structure.TaskReference"};
}
