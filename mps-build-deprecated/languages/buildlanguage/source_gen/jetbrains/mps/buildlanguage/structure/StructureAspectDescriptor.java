package jetbrains.mps.buildlanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractCall = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.AbstractCall").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.buildlanguage.structure.IProjectComponent", "jetbrains.mps.buildlanguage.structure.ICommented").children(new String[]{"nested", "internalText"}, new boolean[]{true, false}).abstract_().alias("task", "").create();
  /*package*/ final ConceptDescriptor myConceptAbstractImportProject = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.AbstractImportProject").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("import abstract project", "").create();
  /*package*/ final ConceptDescriptor myConceptAbstractImportProperties = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.AbstractImportProperties").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().alias("import-properties", "").create();
  /*package*/ final ConceptDescriptor myConceptAbstractPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.buildlanguage.structure.IProjectComponent", "jetbrains.mps.buildlanguage.structure.ICommented").children(new String[]{"type"}, new boolean[]{false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.BinaryOperation").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptBooleanLiteral = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.BooleanLiteral").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").properties("value").alias("boolean literal", "boolean literal in build language").create();
  /*package*/ final ConceptDescriptor myConceptBooleanType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.BooleanType").super_("jetbrains.mps.buildlanguage.structure.PropertyType").parents("jetbrains.mps.buildlanguage.structure.PropertyType").alias("boolean", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCallReference = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.CallReference").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").references("call").create();
  /*package*/ final ConceptDescriptor myConceptCallReferenceType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.CallReferenceType").super_("jetbrains.mps.buildlanguage.structure.PropertyType").parents("jetbrains.mps.buildlanguage.structure.PropertyType").alias("reference", "reference to a call").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEnum = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.Enum").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"constants"}, new boolean[]{true}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptExternalPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration").super_("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration").parents("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration").properties("checkOnStart").alias("external property", "").create();
  /*package*/ final ConceptDescriptor myConceptFileName = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.FileName").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").children(new String[]{"value"}, new boolean[]{false}).alias("file (", "file in build language").create();
  /*package*/ final ConceptDescriptor myConceptFileType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.FileType").super_("jetbrains.mps.buildlanguage.structure.PropertyType").parents("jetbrains.mps.buildlanguage.structure.PropertyType").alias("file", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIAntScript = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IAntScript").interface_().create();
  /*package*/ final ConceptDescriptor myConceptICommented = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ICommented").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IDeclaration").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIProjectComponent = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IProjectComponent").interface_().parents("jetbrains.mps.lang.core.structure.INamedConcept").create();
  /*package*/ final ConceptDescriptor myConceptIPropertyHolder = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IPropertyHolder").interface_().create();
  /*package*/ final ConceptDescriptor myConceptISource = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ISource").interface_().create();
  /*package*/ final ConceptDescriptor myConceptITargetReference = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ITargetReference").interface_().create();
  /*package*/ final ConceptDescriptor myConceptImportProject = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ImportProject").super_("jetbrains.mps.buildlanguage.structure.AbstractImportProject").parents("jetbrains.mps.buildlanguage.structure.AbstractImportProject").references("project").alias("import", "import buildlanguage project").create();
  /*package*/ final ConceptDescriptor myConceptImportPropertiesFromFile = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ImportPropertiesFromFile").super_("jetbrains.mps.buildlanguage.structure.AbstractImportProperties").parents("jetbrains.mps.buildlanguage.structure.AbstractImportProperties").children(new String[]{"propertyFile"}, new boolean[]{false}).alias("import-properties", "import properties from file").create();
  /*package*/ final ConceptDescriptor myConceptImportPropertyNode = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.ImportPropertyNode").super_("jetbrains.mps.buildlanguage.structure.AbstractImportProperties").parents("jetbrains.mps.buildlanguage.structure.AbstractImportProperties", "jetbrains.mps.buildlanguage.structure.IProjectComponent").references("propertyNode").alias("import-properties", "import property node").create();
  /*package*/ final ConceptDescriptor myConceptIntLiteral = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IntLiteral").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").properties("value").alias("integer literal", "integer literal in build language").create();
  /*package*/ final ConceptDescriptor myConceptIntegerEnum = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IntegerEnum").super_("jetbrains.mps.buildlanguage.structure.Enum").parents("jetbrains.mps.buildlanguage.structure.Enum").alias("{ int }", "enum of integer").create();
  /*package*/ final ConceptDescriptor myConceptIntegerType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.IntegerType").super_("jetbrains.mps.buildlanguage.structure.PropertyType").parents("jetbrains.mps.buildlanguage.structure.PropertyType").alias("integer", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMultiLineString = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.MultiLineString").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"stringExpression"}, new boolean[]{true}).alias("multi-line expression", "multi-line expression in buildlanguage").create();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.PlusOperation").super_("jetbrains.mps.buildlanguage.structure.BinaryOperation").parents("jetbrains.mps.buildlanguage.structure.BinaryOperation").alias("plus operation", "plus operation in build language").create();
  /*package*/ final ConceptDescriptor myConceptProject = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.Project").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.buildlanguage.structure.IPropertyHolder", "jetbrains.mps.buildlanguage.structure.IAntScript").children(new String[]{"target", "default", "importProject", "paths", "importProperties", "basedir", "property"}, new boolean[]{true, false, true, true, true, false, true}).alias("project", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertyDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.PropertyDeclaration").super_("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration").parents("jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration").children(new String[]{"propertyValue"}, new boolean[]{false}).alias("property", "").create();
  /*package*/ final ConceptDescriptor myConceptPropertyReference = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.PropertyReference").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.lang.core.structure.INamedConcept").references("propertyDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptPropertyType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.PropertyType").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPropertyValueExpression = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.buildlanguage.structure.ISource").abstract_().create();
  /*package*/ final ConceptDescriptor myConceptStringEnum = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.StringEnum").super_("jetbrains.mps.buildlanguage.structure.Enum").parents("jetbrains.mps.buildlanguage.structure.Enum").alias("{ string }", "enum of string").create();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.StringLiteral").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.lang.core.structure.INamedConcept").properties("value").alias("\"\"", "string literal in build language").create();
  /*package*/ final ConceptDescriptor myConceptStringType = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.StringType").super_("jetbrains.mps.buildlanguage.structure.PropertyType").parents("jetbrains.mps.buildlanguage.structure.PropertyType").alias("string", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTargetDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.TargetDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.buildlanguage.structure.IProjectComponent", "jetbrains.mps.buildlanguage.structure.IPropertyHolder", "jetbrains.mps.buildlanguage.structure.ICommented").properties("if", "unless").children(new String[]{"taskCall", "depends", "propertyList"}, new boolean[]{true, true, true}).alias("target", "").create();
  /*package*/ final ConceptDescriptor myConceptTargetReference = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.TargetReference").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("targetDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptTargetReferencePropertyValueExpression = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.buildlanguage.structure.ITargetReference").properties("fullName").references("declaration").create();
  /*package*/ final ConceptDescriptor myConceptXmlStringLiteral = new ConceptDescriptorBuilder("jetbrains.mps.buildlanguage.structure.XmlStringLiteral").super_("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").parents("jetbrains.mps.buildlanguage.structure.PropertyValueExpression").children(new String[]{"xml"}, new boolean[]{false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractCall, myConceptAbstractImportProject, myConceptAbstractImportProperties, myConceptAbstractPropertyDeclaration, myConceptBinaryOperation, myConceptBooleanLiteral, myConceptBooleanType, myConceptCallReference, myConceptCallReferenceType, myConceptEnum, myConceptExternalPropertyDeclaration, myConceptFileName, myConceptFileType, myConceptIAntScript, myConceptICommented, myConceptIDeclaration, myConceptIProjectComponent, myConceptIPropertyHolder, myConceptISource, myConceptITargetReference, myConceptImportProject, myConceptImportPropertiesFromFile, myConceptImportPropertyNode, myConceptIntLiteral, myConceptIntegerEnum, myConceptIntegerType, myConceptMultiLineString, myConceptPlusOperation, myConceptProject, myConceptPropertyDeclaration, myConceptPropertyReference, myConceptPropertyType, myConceptPropertyValueExpression, myConceptStringEnum, myConceptStringLiteral, myConceptStringType, myConceptTargetDeclaration, myConceptTargetReference, myConceptTargetReferencePropertyValueExpression, myConceptXmlStringLiteral);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0rb, conceptFqName)) {
      case 0:
        return myConceptAbstractCall;
      case 1:
        return myConceptAbstractImportProject;
      case 2:
        return myConceptAbstractImportProperties;
      case 3:
        return myConceptAbstractPropertyDeclaration;
      case 4:
        return myConceptBinaryOperation;
      case 5:
        return myConceptBooleanLiteral;
      case 6:
        return myConceptBooleanType;
      case 7:
        return myConceptCallReference;
      case 8:
        return myConceptCallReferenceType;
      case 9:
        return myConceptEnum;
      case 10:
        return myConceptExternalPropertyDeclaration;
      case 11:
        return myConceptFileName;
      case 12:
        return myConceptFileType;
      case 13:
        return myConceptIAntScript;
      case 14:
        return myConceptICommented;
      case 15:
        return myConceptIDeclaration;
      case 16:
        return myConceptIProjectComponent;
      case 17:
        return myConceptIPropertyHolder;
      case 18:
        return myConceptISource;
      case 19:
        return myConceptITargetReference;
      case 20:
        return myConceptImportProject;
      case 21:
        return myConceptImportPropertiesFromFile;
      case 22:
        return myConceptImportPropertyNode;
      case 23:
        return myConceptIntLiteral;
      case 24:
        return myConceptIntegerEnum;
      case 25:
        return myConceptIntegerType;
      case 26:
        return myConceptMultiLineString;
      case 27:
        return myConceptPlusOperation;
      case 28:
        return myConceptProject;
      case 29:
        return myConceptPropertyDeclaration;
      case 30:
        return myConceptPropertyReference;
      case 31:
        return myConceptPropertyType;
      case 32:
        return myConceptPropertyValueExpression;
      case 33:
        return myConceptStringEnum;
      case 34:
        return myConceptStringLiteral;
      case 35:
        return myConceptStringType;
      case 36:
        return myConceptTargetDeclaration;
      case 37:
        return myConceptTargetReference;
      case 38:
        return myConceptTargetReferencePropertyValueExpression;
      case 39:
        return myConceptXmlStringLiteral;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0rb = new String[]{"jetbrains.mps.buildlanguage.structure.AbstractCall", "jetbrains.mps.buildlanguage.structure.AbstractImportProject", "jetbrains.mps.buildlanguage.structure.AbstractImportProperties", "jetbrains.mps.buildlanguage.structure.AbstractPropertyDeclaration", "jetbrains.mps.buildlanguage.structure.BinaryOperation", "jetbrains.mps.buildlanguage.structure.BooleanLiteral", "jetbrains.mps.buildlanguage.structure.BooleanType", "jetbrains.mps.buildlanguage.structure.CallReference", "jetbrains.mps.buildlanguage.structure.CallReferenceType", "jetbrains.mps.buildlanguage.structure.Enum", "jetbrains.mps.buildlanguage.structure.ExternalPropertyDeclaration", "jetbrains.mps.buildlanguage.structure.FileName", "jetbrains.mps.buildlanguage.structure.FileType", "jetbrains.mps.buildlanguage.structure.IAntScript", "jetbrains.mps.buildlanguage.structure.ICommented", "jetbrains.mps.buildlanguage.structure.IDeclaration", "jetbrains.mps.buildlanguage.structure.IProjectComponent", "jetbrains.mps.buildlanguage.structure.IPropertyHolder", "jetbrains.mps.buildlanguage.structure.ISource", "jetbrains.mps.buildlanguage.structure.ITargetReference", "jetbrains.mps.buildlanguage.structure.ImportProject", "jetbrains.mps.buildlanguage.structure.ImportPropertiesFromFile", "jetbrains.mps.buildlanguage.structure.ImportPropertyNode", "jetbrains.mps.buildlanguage.structure.IntLiteral", "jetbrains.mps.buildlanguage.structure.IntegerEnum", "jetbrains.mps.buildlanguage.structure.IntegerType", "jetbrains.mps.buildlanguage.structure.MultiLineString", "jetbrains.mps.buildlanguage.structure.PlusOperation", "jetbrains.mps.buildlanguage.structure.Project", "jetbrains.mps.buildlanguage.structure.PropertyDeclaration", "jetbrains.mps.buildlanguage.structure.PropertyReference", "jetbrains.mps.buildlanguage.structure.PropertyType", "jetbrains.mps.buildlanguage.structure.PropertyValueExpression", "jetbrains.mps.buildlanguage.structure.StringEnum", "jetbrains.mps.buildlanguage.structure.StringLiteral", "jetbrains.mps.buildlanguage.structure.StringType", "jetbrains.mps.buildlanguage.structure.TargetDeclaration", "jetbrains.mps.buildlanguage.structure.TargetReference", "jetbrains.mps.buildlanguage.structure.TargetReferencePropertyValueExpression", "jetbrains.mps.buildlanguage.structure.XmlStringLiteral"};
}
