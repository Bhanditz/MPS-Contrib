package jetbrains.mps.uiLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptActionHandler = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ActionHandler").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"handler"}, new boolean[]{false}).alias("action:", "").create();
  /*package*/ final ConceptDescriptor myConceptAddListenerOperation = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.AddListenerOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("+=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAfterConstructionBlock = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.AfterConstructionBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"body"}, new boolean[]{false}).alias("after construction", "").create();
  /*package*/ final ConceptDescriptor myConceptAttributeDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.AttributeDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMember").children(new String[]{"type", "initializer", "onChange"}, new boolean[]{false, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptAttributeReferenceOperation = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.AttributeReferenceOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("attributeDeclaration").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAttributeValue = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.AttributeValue").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").references("attribute").children(new String[]{"value"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptBeanCreator = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.BeanCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("constructor").children(new String[]{"parameter"}, new boolean[]{true}).alias("bean", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBeanDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.BeanDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier", "jetbrains.mps.lang.core.structure.INamedConcept").children(new String[]{"attribute", "method", "constructor"}, new boolean[]{true, true, true}).alias("bean", "").create();
  /*package*/ final ConceptDescriptor myConceptBeanType = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.BeanType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("bean").alias("bean<>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBeforeConstructionBlock = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.BeforeConstructionBlock").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"body"}, new boolean[]{false}).alias("before construction", "").create();
  /*package*/ final ConceptDescriptor myConceptBindExpression = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.BindExpression").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").children(new String[]{"expression"}, new boolean[]{false}).alias("{", "bind expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCellRendererAttribute = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.CellRendererAttribute").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"renderer"}, new boolean[]{false}).alias("renderer:", "").create();
  /*package*/ final ConceptDescriptor myConceptComponentController = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentController").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifierPart").references("component").children(new String[]{"attribute", "event", "componentMethod", "afterConstruction", "beforeConstruction"}, new boolean[]{true, true, true, false, false}).create();
  /*package*/ final ConceptDescriptor myConceptComponentCreator = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentCreator").super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").references("componentDeclaration").alias("component", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComponentDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IClassifier").properties("stub", "abstract", "actionComponent").references("extendedComponent", "mapTo").children(new String[]{"root", "rendererInfo"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptComponentInstance = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentInstance").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart", "jetbrains.mps.uiLanguage.structure.IComponentInstance", "jetbrains.mps.lang.core.structure.INamedConcept").references("componentDeclaration").create();
  /*package*/ final ConceptDescriptor myConceptComponentReference = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("component").alias("<{component}>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComponentType = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ComponentType").super_("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").parents("jetbrains.mps.baseLanguage.classifiers.structure.BaseClassifierType").references("component").alias("component<>", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEventAccessOperation = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.EventAccessOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMemberOperation").references("event").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptEventDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.EventDeclaration").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.classifiers.structure.IMember", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").children(new String[]{"parameter", "initializer"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptEventHandlerReference = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.EventHandlerReference").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").references("handler").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptForm = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.Form").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart", "jetbrains.mps.uiLanguage.structure.IComponentInstance").children(new String[]{"part"}, new boolean[]{true}).alias("Form", "").create();
  /*package*/ final ConceptDescriptor myConceptFormPart = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.FormPart").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("label").children(new String[]{"content"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptGrid = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.Grid").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentInstance").children(new String[]{"row"}, new boolean[]{true}).alias("Grid", "").create();
  /*package*/ final ConceptDescriptor myConceptGridRow = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.GridRow").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").children(new String[]{"component"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIComponentInstance = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.IComponentInstance").interface_().parents("jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"content"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptIComponentPart = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.IComponentPart").interface_().create();
  /*package*/ final ConceptDescriptor myConceptInlineEventHandler = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.InlineEventHandler").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").references("event").children(new String[]{"handler"}, new boolean[]{false}).alias("inline event handler", "").create();
  /*package*/ final ConceptDescriptor myConceptInlineRenderer = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.InlineRenderer").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"renderer"}, new boolean[]{false}).alias("renderer(inline):", "").create();
  /*package*/ final ConceptDescriptor myConceptLayoutConstraint = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.LayoutConstraint").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"constraint"}, new boolean[]{false}).alias("layout constraint", "").create();
  /*package*/ final ConceptDescriptor myConceptListElements = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.ListElements").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentPart").children(new String[]{"value"}, new boolean[]{false}).alias("elements", "").create();
  /*package*/ final ConceptDescriptor myConceptPngIcon = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.PngIcon").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").properties("iconData").alias("PNG icon", "").create();
  /*package*/ final ConceptDescriptor myConceptRaiseInternalStatement = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.RaiseInternalStatement").super_("jetbrains.mps.baseLanguage.structure.Statement").parents("jetbrains.mps.baseLanguage.structure.Statement").children(new String[]{"argument"}, new boolean[]{false}).alias("raise", "raise this event").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRaiseOperation = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.RaiseOperation").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").children(new String[]{"argument"}, new boolean[]{false}).alias("raise", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRemoveListenerOperation = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.RemoveListenerOperation").super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").alias("-=", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptRenderingObject = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.RenderingObject").super_("jetbrains.mps.baseLanguage.structure.Expression").parents("jetbrains.mps.baseLanguage.structure.Expression").alias("object", "value to render").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptScroller = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.Scroller").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentInstance").alias("Scroller", "").create();
  /*package*/ final ConceptDescriptor myConceptStandardDialog = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.StandardDialog").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.uiLanguage.structure.IComponentInstance").children(new String[]{"rootComponent", "button"}, new boolean[]{false, true}).alias("Dialog", "").create();
  /*package*/ final ConceptDescriptor myConceptStandardDialogButton = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.StandardDialogButton").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").properties("text", "isDefault").children(new String[]{"handler"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptStubCellRendererInfo = new ConceptDescriptorBuilder("jetbrains.mps.uiLanguage.structure.StubCellRendererInfo").super_("jetbrains.mps.lang.core.structure.BaseConcept").parents("jetbrains.mps.lang.core.structure.BaseConcept").references("cellRendererSetter").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActionHandler, myConceptAddListenerOperation, myConceptAfterConstructionBlock, myConceptAttributeDeclaration, myConceptAttributeReferenceOperation, myConceptAttributeValue, myConceptBeanCreator, myConceptBeanDeclaration, myConceptBeanType, myConceptBeforeConstructionBlock, myConceptBindExpression, myConceptCellRendererAttribute, myConceptComponentController, myConceptComponentCreator, myConceptComponentDeclaration, myConceptComponentInstance, myConceptComponentReference, myConceptComponentType, myConceptEventAccessOperation, myConceptEventDeclaration, myConceptEventHandlerReference, myConceptForm, myConceptFormPart, myConceptGrid, myConceptGridRow, myConceptIComponentInstance, myConceptIComponentPart, myConceptInlineEventHandler, myConceptInlineRenderer, myConceptLayoutConstraint, myConceptListElements, myConceptPngIcon, myConceptRaiseInternalStatement, myConceptRaiseOperation, myConceptRemoveListenerOperation, myConceptRenderingObject, myConceptScroller, myConceptStandardDialog, myConceptStandardDialogButton, myConceptStubCellRendererInfo);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0rb, conceptFqName)) {
      case 0:
        return myConceptActionHandler;
      case 1:
        return myConceptAddListenerOperation;
      case 2:
        return myConceptAfterConstructionBlock;
      case 3:
        return myConceptAttributeDeclaration;
      case 4:
        return myConceptAttributeReferenceOperation;
      case 5:
        return myConceptAttributeValue;
      case 6:
        return myConceptBeanCreator;
      case 7:
        return myConceptBeanDeclaration;
      case 8:
        return myConceptBeanType;
      case 9:
        return myConceptBeforeConstructionBlock;
      case 10:
        return myConceptBindExpression;
      case 11:
        return myConceptCellRendererAttribute;
      case 12:
        return myConceptComponentController;
      case 13:
        return myConceptComponentCreator;
      case 14:
        return myConceptComponentDeclaration;
      case 15:
        return myConceptComponentInstance;
      case 16:
        return myConceptComponentReference;
      case 17:
        return myConceptComponentType;
      case 18:
        return myConceptEventAccessOperation;
      case 19:
        return myConceptEventDeclaration;
      case 20:
        return myConceptEventHandlerReference;
      case 21:
        return myConceptForm;
      case 22:
        return myConceptFormPart;
      case 23:
        return myConceptGrid;
      case 24:
        return myConceptGridRow;
      case 25:
        return myConceptIComponentInstance;
      case 26:
        return myConceptIComponentPart;
      case 27:
        return myConceptInlineEventHandler;
      case 28:
        return myConceptInlineRenderer;
      case 29:
        return myConceptLayoutConstraint;
      case 30:
        return myConceptListElements;
      case 31:
        return myConceptPngIcon;
      case 32:
        return myConceptRaiseInternalStatement;
      case 33:
        return myConceptRaiseOperation;
      case 34:
        return myConceptRemoveListenerOperation;
      case 35:
        return myConceptRenderingObject;
      case 36:
        return myConceptScroller;
      case 37:
        return myConceptStandardDialog;
      case 38:
        return myConceptStandardDialogButton;
      case 39:
        return myConceptStubCellRendererInfo;
      default:
        return null;
    }
  }
  private static String[] stringSwitchCases_1htk8d_a0a0rb = new String[]{"jetbrains.mps.uiLanguage.structure.ActionHandler", "jetbrains.mps.uiLanguage.structure.AddListenerOperation", "jetbrains.mps.uiLanguage.structure.AfterConstructionBlock", "jetbrains.mps.uiLanguage.structure.AttributeDeclaration", "jetbrains.mps.uiLanguage.structure.AttributeReferenceOperation", "jetbrains.mps.uiLanguage.structure.AttributeValue", "jetbrains.mps.uiLanguage.structure.BeanCreator", "jetbrains.mps.uiLanguage.structure.BeanDeclaration", "jetbrains.mps.uiLanguage.structure.BeanType", "jetbrains.mps.uiLanguage.structure.BeforeConstructionBlock", "jetbrains.mps.uiLanguage.structure.BindExpression", "jetbrains.mps.uiLanguage.structure.CellRendererAttribute", "jetbrains.mps.uiLanguage.structure.ComponentController", "jetbrains.mps.uiLanguage.structure.ComponentCreator", "jetbrains.mps.uiLanguage.structure.ComponentDeclaration", "jetbrains.mps.uiLanguage.structure.ComponentInstance", "jetbrains.mps.uiLanguage.structure.ComponentReference", "jetbrains.mps.uiLanguage.structure.ComponentType", "jetbrains.mps.uiLanguage.structure.EventAccessOperation", "jetbrains.mps.uiLanguage.structure.EventDeclaration", "jetbrains.mps.uiLanguage.structure.EventHandlerReference", "jetbrains.mps.uiLanguage.structure.Form", "jetbrains.mps.uiLanguage.structure.FormPart", "jetbrains.mps.uiLanguage.structure.Grid", "jetbrains.mps.uiLanguage.structure.GridRow", "jetbrains.mps.uiLanguage.structure.IComponentInstance", "jetbrains.mps.uiLanguage.structure.IComponentPart", "jetbrains.mps.uiLanguage.structure.InlineEventHandler", "jetbrains.mps.uiLanguage.structure.InlineRenderer", "jetbrains.mps.uiLanguage.structure.LayoutConstraint", "jetbrains.mps.uiLanguage.structure.ListElements", "jetbrains.mps.uiLanguage.structure.PngIcon", "jetbrains.mps.uiLanguage.structure.RaiseInternalStatement", "jetbrains.mps.uiLanguage.structure.RaiseOperation", "jetbrains.mps.uiLanguage.structure.RemoveListenerOperation", "jetbrains.mps.uiLanguage.structure.RenderingObject", "jetbrains.mps.uiLanguage.structure.Scroller", "jetbrains.mps.uiLanguage.structure.StandardDialog", "jetbrains.mps.uiLanguage.structure.StandardDialogButton", "jetbrains.mps.uiLanguage.structure.StubCellRendererInfo"};
}
